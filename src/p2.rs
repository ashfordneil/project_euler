//! Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
//! starting with 1 and 2, the first 10 terms will be:

//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

//! By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//! find the sum of the even-valued terms.

use std::iter::Iterator;
use std::ops::Add;

/// An iterator that generates sequential fibonacci numbers.
struct Fibonacci {
    one: u32,
    two: u32,
}

impl Iterator for Fibonacci {
    type Item = u32;

    fn next(&mut self) -> Option<u32> {
        let output = self.one + self.two;
        self.one = self.two;
        self.two = output;
        Some(output)
    }
}

fn main() {
    let answer = Fibonacci { one: 0, two: 1 }
        .filter(|&x| x % 2 == 0)
        .take_while(|&x| x < 4000000)
        .fold(0, Add::add);
    println!("Answer: {}", answer);
}
